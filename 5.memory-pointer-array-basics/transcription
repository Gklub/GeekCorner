
标题

	要理解数组，首先要理解指针；要理解指针，首先要理解内存

	内存：只讲“软件”：申请、释放、访问 等概念的理解
	      不讲“硬件”：内存条、大小、作用


内存1

	世纪之初，地球诞生，于是有了一块方形的大地。之后人类出现。
	人要地盘。

	A：找个地方画个圈，我的！造房子造房子……
	B：找个地方画个框，我的！种地种地……

	A：待腻了，这儿不要了，把圈擦掉；那儿不错，画个圈，我的！
	B：A待的那个地方不错啊，那个SB居然搬走了；把框擦掉，到原来A的地盘画个框，我的！
	   嗯，这个地方不错，推倒A盖的房子，种地！种黄瓜！

	注意以上过程：
		大地 <~> 内存：不管你用不用，就那么大放那儿
		画圈/框/三角形 <~> 申请内存：是自己画的；
		               所以要有共识：圈内是A的，框内是B的，三角形内是C的
		         进我的地盘我打死你：这么大块地，你怎么知道有人来了；但是看到就打
		擦除 <~> 释放内存：有遗产的；别人再次占领时可以选择保留还是推倒


内存2

	人们相安无事的过了几个世纪……

	C：找个地方画个三角形，我的！种地！
	人难免犯错，三角形不小心画到B种黄瓜的地方了

	"再次占领时选择保留 or 推倒"，以为是前人留下的，果断推倒！种茄子！

	B算着日子想，黄瓜应该熟了吧

	B：疑，这是黄瓜？
	   嗯，这一定是黄瓜，黄瓜熟了一定是这样的，我是有文化的人怎么可能看错，嗯，一定是这样的。
	于是B带走了"黄瓜"，吃起了紫色的黄瓜。

	注意以上过程：
		B知道黄瓜长啥样，但还是坚信这就是黄瓜
		B、C同时拥有了同一块内存，C写了个浮点数1.0，B以为是整数，读出来得1065353216


内存3

	于是相安无事几个世纪，出现了集权社会
	出现了“地球联合政府土地发展改革委员会”，简称“土改委”
	打土豪，分田地，土地收归政府；只有使用权，没有所有权

	申请土地：撰写并提交申请，审批三个月后获得使用权
	释放土地：合同到期，或者毁约


现场互动？：未定义行为
	那么政府用什么方案分配土地呢？我们来看一下：
	（从左上到右下，一行分配完了再分配下一行）
	（分配到一半过后暂停）
	假设我是房地产商，我要造房子，要申请土地
	但是三个月太慢了（三个月我房子都造好了），
	所以我想提交完申请就先开工（注意，申请时只能说要多大，不能说在哪里）
	提问：我要在哪里开工？
	（政府分配了右下角）
	（咱们愉快的蹲监狱吧）

	刚刚发生了什么？
	    通过观察，推测了分配方案
		然后发现和预期的不一样啊

	政府从来没说过分配方案是那样的
	实际分配方案是，把上面一半分完了，下面一半反过来分配

	这就是未定义行为：通过观察，以为是这样，但实际上人家没说过

	开启全警告


内存4

	坏处：审批太慢了
	解决方法：
	    1：督促政府提高行政效率  （你敢！）
		2：我一次性申请一块大的地盘，然后自己分配

	于是问题来了：我自己要用什么方案分配？
	    划条线，左边是已经在用的，右边是还没用的
		（动画演示申请、释放）


	于是大家纷纷效仿，于是政府干脆宣布就这样分

	堆内存：从政府那里申请来的内存
	栈内存：从自己管理的地盘里申请来的内存


内存到指针过度

	我们一直没有解决一个问题：从哪里到哪里要怎么表达？
	在内存中如何表达“从这里到那里”呢？

	编个号呗！给缝编号

	可以有多种表达方式：
	1、两条缝之间的就是你的
	2、从这条缝开始向右3个格子是你的

	我们把黄瓜们放进去，再种点树
	1、1号缝向右一格里的“黄瓜”（茄子）
	2、2号缝向右一格里的“黄瓜”（树的一半）

	为什么我又提到这个了呢？因为这就是（才是）指针

	为什么说“才是”？因为很多人把指针当作是“内存地址”
	但是别忘了，一条缝有什么用啊，必须要有大小和“是什么”啊

指针1

	要素：
		地址：黄瓜在哪里
		类型：大小：有黄瓜那么长
		      什么：这真的是黄瓜……

	未初始化：
	直接读没意义：不种，挖出来都是土，哦不，这真的是黄瓜
	所以必须先种东西进去再读


指针3：运算

	1.“我是指针”运算符 *
		int* p;

	2.“看地址娶类型”运算符 &
		int x = 10;
		int* p = &x;

	3.“走过去”运算符 *
		x = *p;
		*p = 20;

	4.“右走”运算符们 ++、+、+=
		p++;
		p += 5;
		p + 5; // *(p+5) = 10;

	5.“左走”运算符们 --、-、-=

	6.“距离”运算符 -
	   int* q = p + 10;
	   x = (q - p);

	7.“跳跃走过”运算符 []
		p[5] <=> *(p+5)


	7."黄瓜茄子"
	float x = 1.0;
	int* p = (int*) &x;
	printf("%d", *p);


指针4：用途

	o 参数返回
	o 数组
	x 无限递归类型（如：链表）的解决方案
	x 把茄子当黄瓜


	参数返回：
	void add_one(int* p) { *p = *p + 1; }

	int x = 10;
	add_one(&x);
	printf("%d", x);


数组：

	一块连续内存就是数组

	区分：
		数组：就是一块连续内存
		数组类型：是什么、有多少		int[5]
		数组变量：一旦使用就变指针		int a[5]

	int* p = a;


字符串：

	字符串（string）是个缩略语
	全称： 以 0 结尾的 char 串（zero-terminated char string）
	串即数组
	注意一定是 char 类型（wchar 之类的不行）的数组
	char 指的不是“字符”，而是 char 这个类型

	“abc”

